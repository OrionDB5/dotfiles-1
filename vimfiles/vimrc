"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                _                                            "
"                         __   _(_)_ __ ___  _ __ ___                         "
"                         \ \ / / | '_ ` _ \| '__/ __|                        "
"                          \ V /| | | | | | | | | (__                         "
"                           \_/ |_|_| |_| |_|_|  \___|                        "
"                                                                             "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" written by Shotaro Fujimoto (https://github.com/ssh0)
"------------------------------------------------------------------------------
" Initial Setting:                                                          {{{
"------------------------------------------------------------------------------

" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
  if &compatible
    set nocompatible
  endif

  " Required:
  set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" use <Space> for mapleader
let mapleader = "\<Space>"
let localleader = "\<Space>"

"---------------------------------------------------------------------------}}}
" Plugin Manager NeoBundle:                                                 {{{
"------------------------------------------------------------------------------

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!

" color scheme                                                               {{{
NeoBundle 'ssh0/easy-reading.vim'
" It's my color theme.
" Project directory:
" ($HOME/.vim/bundle/easy-reading.vim/colors/easy-reading.vim)
"                                                                           }}}

" Surround
NeoBundle 'surround.vim'

" Commentary
NeoBundle 'tpope/vim-commentary'

" unite.vim                                                                 {{{
NeoBundle 'Shougo/unite.vim'
let g:unite_enable_start_insert=1
let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 200
nnoremap <silent> <Leader>uy :<C-u>Unite history/yank<CR>
nnoremap <silent> <Leader>ub :<C-u>Unite buffer<CR>
nnoremap <silent> <Leader>uf :<C-u>UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> <Leader>ur :<C-u>Unite -buffer-name=register register<CR>
nnoremap <silent> <Leader>uu :<C-u>Unite file_mru buffer<CR>
"                                                                           }}}
" vimfiler                                                                  {{{
NeoBundle 'Shougo/vimfiler.vim'
" vim use vimfiler as file manager instead of netry.
let g:vimfiler_as_default_explorer = 1
nnoremap <silent> <Leader>e :VimFilerBufferDir -buffer-name=explorer -split
\ -simple -winwidth=35 -toggle -no-quit<CR>
"                                                                           }}}
" ag                                                                        {{{
NeoBundle 'rking/ag.vim'
"                                                                           }}}
" ctrlp.vim                                                                 {{{
NeoBundle 'kien/ctrlp.vim'
if executable('ag')
  let g:ctrlp_user_command='ag %s -i --nocolor --nogroup -g ""'
endif
nnoremap <Leader>oo :CtrlP<CR>
nnoremap <Leader>om :CtrlPMixed<CR>
nnoremap <Leader>or :CtrlPMRUFiles<CR>
" Once CtrlP is open:
" * Press `<F5>` to purge the cache for the current directory to get new  
"   files, remove deleted files and apply new ignore options.
" * Press `<c-f>` and `<c-b>` to cycle between modes.
" * Press `<c-d>` to switch to filename only search instead of full path.
" * Press `<c-r>` to switch to regexp mode.
" * Use `<c-j>`, `<c-k>` or the arrow keys to navigate the result list.
" * Use `<c-t>` or `<c-v>`, `<c-x>` to open the selected entry in a new  
"   tab or in a new split.
" * Use `<c-n>`, `<c-p>` to select the next/previous string in the  
"   prompt's history.
" * Use `<c-y>` to create a new file and its parent directories.
" * Use `<c-z>` to mark/unmark multiple files and `<c-o>` to open them.
"                                                                           }}}
" unite-mark                                                                {{{
NeoBundle 'tacroe/unite-mark'
let g:unite_source_mark_marks =
\   "abcdefghijklmnopqrstuvwxyz"
\ . "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
\ . "0123456789.'`^<>[]{}()\""
" key bind: `` or ''
nnoremap <silent> `` :Unite mark<CR>
nnoremap <silent> '' :Unite mark<CR>
"                                                                           }}}
" vim-signature                                                             {{{
NeoBundle 'kshenoy/vim-signature'
" Signature
" Highlight signs of marks dynamically based upon state indicated by
" vim-gitgutter or vim-signify
let g:SignatureMartTextHLDynamic = 1
let g:SignatureMarkTextHL = "'SignColumn'"
"                                                                           }}}
" Folding                                                                   {{{
NeoBundle 'LeafCage/foldCC'
set foldtext=FoldCCtext()
"                                                                           }}}
" open-browser                                                              {{{
NeoBundle 'tyru/open-browser.vim'
" for open-browser plugin
let g:netrw_nogx = 1 " disable netrw's gx mapping.
nmap gx <Plug>(openbrowser-smart-search)
vmap gx <Plug>(openbrowser-smart-search)
"                                                                           }}}
" vim-quickrun                                                              {{{
NeoBundle 'thinca/vim-quickrun'
let g:quickrun_config = {}
let g:quickrun_no_default_key_mapping = 0

"                                                                           }}}
" vim-template                                                              {{{
NeoBundle 'thinca/vim-template'
" inside <%= %> is estimated by vim and expanded automatically
autocmd User plugin-template-loaded
  \ silent %s/<%=\(.\{-}\)%>/\=eval(submatch(1))/ge
" if you write like below, the string is expanded to date.
" <%= strftime('%Y-%m-%d') %>

" move the cursor to <+CURSOR+>
autocmd User plugin-template-loaded
  \    if search('<+CURSOR+>')
  \  |   execute 'normal! "_da>'
  \  | endif
"                                                                           }}}
" vim-submode
NeoBundle 'kana/vim-submode'

" powerline settings
" alpaca_powertabline                                                       {{{
NeoBundle 'alpaca-tc/alpaca_powertabline'

let g:alpaca_powertabline_sep1 = '█ '
let g:alpaca_powertabline_sep2 = ':'
let g:alpaca_powertabline_colors = {
                \   "base" : {
                \     "bg" : 240,
                \     "fg" : 255,
                \   },
                \   "sel" : {
                \     "bg": 240,
                \     "fg": 231,
                \   },
                \   "passive": {
                \     "bg": 234,
                \     "fg": 245,
                \   },
                \ }
"                                                                           }}}
NeoBundle 'Lokaltog/powerline', { 'rtp' : 'powerline/bindings/vim'}
NeoBundle 'Lokaltog/powerline-fontpatcher'

" for markdown
" vim-markdown                                                              {{{
NeoBundle 'rcmdnk/vim-markdown', {
      \ 'depends': [
      \   'godlygeek/tabular',
      \]}
" Unset Disable folding
let g:vim_markdown_folding_disabled = 1
" Disable Default Key Mapping
let g:vim_markdown_no_default_key_mappings = 1
" LaTeX math
let g:vim_markdown_math = 1
"                                                                           }}}
NeoBundle 'joker1007/vim-markdown-quote-syntax'

" for LaTeX
NeoBundle 'lervag/vimtex'
let g:vimtex_fold_envs = 0
let g:vimtex_view_general_viewer = 'mupdf'

" for Python
" jedi-vim                                                                  {{{
NeoBundle 'davidhalter/jedi-vim'
" jedi complete
let g:jedi#popup_on_dot = 1
let g:jedi#popup_select_first = 0
"                                                                           }}}
" vim-python-pep8-indent                                                    {{{
NeoBundleLazy 'hynek/vim-python-pep8-indent', {
      \ "autoload": {"insert": 1, "filetype": ["python", "python3", "djangohtml"]}}
"                                                                           }}}

" autocomplete                                                              {{{
NeoBundle 'ujihisa/neco-look', {
      \ 'depends': [
      \   'Shougo/neocomplcache.vim',
      \]}
"                                                                           }}}

" supertab
NeoBundle 'ervandew/supertab'

" Gista                                                                     {{{
" easily sent a gista
NeoBundle 'lambdalisue/vim-gista', {
      \ 'depends': [
      \   'Shougo/unite.vim',
      \   'tyru/open-browser.vim',
      \]}
let g:gista#github_user = 'ssh0'
let g:gista#update_on_write = 1
"                                                                           }}}

call neobundle#end()

" If there are uninstalled bundles dfound on startup,
" this will conveiently prompt you to install them.
NeoBundleCheck

" Required:
filetype plugin indent on

colorscheme easy-reading

"---------------------------------------------------------------------------}}}
" Autocmd:                                                                  {{{
"------------------------------------------------------------------------------

" set title for currently viewing
" [tmux tabs with name of file open in vim - Stack Overflow]
" http://stackoverflow.com/questions/15123477/tmux-tabs-with-name-of-file-open-in-vim
if $TMUX != ""
  augroup titlesettings
    autocmd!
    autocmd BufEnter * call system("tmux rename-window " . "'(vim)" . expand("%:t") . "'")
    autocmd VimLeave * call system("tmux rename-window zsh")
    autocmd BufEnter * let &titlestring = ' ' . expand("%:t")
  augroup END
endif
augroup filetype
  autocmd!
  " markdown
  autocmd BufRead,BufNewFile *.{mkd,md} set filetype=markdown
  autocmd! FileType markdown hi! def link markdownItalic Normal
  autocmd FileType markdown set commentstring=<\!--\ %s\ -->
  " tex file (I always use latex)
  autocmd BufRead,BufNewFile *.tex set filetype=tex
  " bib file
  autocmd BufRead,BufNewFile *.bib set filetype=bib
  autocmd Filetype bib let &formatprg="bibclean"
  " python
  autocmd Filetype python let &formatprg="autopep8 -"
  autocmd FileType python setlocal completeopt-=preview
  " html
  let html_to_html  = "pandoc --from=html --to=markdown"
  let html_to_html .= " | pandoc --from=markdown --to=html"
  autocmd Filetype html let &formatprg=html_to_html
augroup END




"---------------------------------------------------------------------------}}}
" Set Options:                                                              {{{
"------------------------------------------------------------------------------

" number line
set number
set relativenumber
set numberwidth=3

" Don't redraw screen during macros
set lazyredraw

" use mouse
if has('mouse')
  set mouse=a
endif

set whichwrap=b,s,[,],<,>

" Default tab width
set softtabstop=4
set shiftwidth=4
set expandtab

" autoindent
set autoindent

" Maximum width of text that is being inserted.
set textwidth=0

" show title
set title

" height of commandline
set cmdheight=1
set laststatus=2

" modeline:
set modeline

" don't show command in status line
set noshowcmd

" Show Tab and Space at end of the line
set list
set listchars=tab:▸\ ,trail:~

" showbreaks
set showbreak=\ ↪

" highlight mathched parenthesis
set showmatch
set matchtime=1

" highlighted search index
set hlsearch

" Show matches while typing
set incsearch

" " folding
set fdm=marker " zf(def) zd(delete) zo(open) zc(close)
set foldcolumn=0
set fillchars=vert:\|

" don't use backup or swap files
set nowritebackup
set nobackup
set noswapfile

" use unnamed register (for outer programs)
set clipboard=unnamedplus,autoselect

" wrapped by 80 characters(PEP8)
set colorcolumn=80

" set completion popup's height
set pumheight=10

" Minimal number of screen lines to keep above and below the cursor.
set scrolloff=0

" always split vertically when using vimdiff
set diffopt=vertical

" less timeoutlen
set timeout timeoutlen=400 ttimeoutlen=75

" disable the conceal function
let g:tex_conceal=''

"---------------------------------------------------------------------------}}}
" Indent:                                                                   {{{
"------------------------------------------------------------------------------

autocmd FileType sh         setlocal sw=2 sts=2 ts=2 et
autocmd FileType apache     setlocal sw=4 sts=4 ts=4 et
autocmd FileType css        setlocal sw=4 sts=4 ts=4 noet
autocmd FileType diff       setlocal sw=4 sts=4 ts=4 noet
autocmd FileType html       setlocal sw=4 sts=4 ts=4 noet
autocmd FileType java       setlocal sw=4 sts=4 ts=4 et
autocmd FileType javascript setlocal sw=4 sts=4 ts=4 noet
autocmd FileType ruby       setlocal sw=2 sts=2 ts=2 et
autocmd FileType eruby      setlocal sw=2 sts=2 ts=2 et
autocmd FileType sql        setlocal sw=4 sts=4 ts=4 et
autocmd FileType vim        setlocal sw=2 sts=2 ts=2 et
autocmd FileType xml        setlocal sw=4 sts=4 ts=4 noet
autocmd FileType yaml       setlocal sw=2 sts=2 ts=2 et
autocmd FileType zsh        setlocal sw=2 sts=2 ts=2 et
autocmd FileType coffee     setlocal sw=2 sts=2 ts=2 et

"---------------------------------------------------------------------------}}}
" My function:                                                              {{{
"------------------------------------------------------------------------------

function! Markdown_h1()
  normal! VypVr=
endfunction

function! Markdown_h2()
  normal! VypVr-
endfunction

function! Markdown_h3()
  normal! I### 
endfunction

"---------------------------------------------------------------------------}}}
" Key Bindings:                                                             {{{
"------------------------------------------------------------------------------

" Escape by jj
inoremap <silent> jj <ESC>

" Toggle relative number by <Space> + l
nnoremap <silent> <Leader>l :setlocal relativenumber! number!<CR>

" move in wrapped line by arrow key
nnoremap <Down> gj
nnoremap <Up> gk

" H -> 0
nnoremap H 0
" L -> $
nnoremap L $

" move from line head to line end
nnoremap h <Left>zv

" move from line end to line head
nnoremap l <Right>zv

" yank to line end
nnoremap Y y$

" craeate new tab
nnoremap <silent> <C-t> :tabnew<CR>

" num increment :help CTRL-A, :help CTRL-X
nnoremap + <C-a>
nnoremap - <C-x>

" cursor moved in insert mode
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>
" for typo
inoremap <C-\;> <Right>

" move between windows by easy key mapping
nnoremap <silent> <C-h> :wincmd h<CR>
nnoremap <silent> <C-j> :wincmd j<CR>
nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-l> :wincmd l<CR>

" clear highlight by pressing Esc twice
nnoremap <ESC><ESC> :nohlsearch<CR>

" open the file in new tab
nnoremap gf <C-w>gf
" create the file and open in new tab
nnoremap gF :tabedit <C-r><C-f><CR>

" multi tab jamp
nnoremap <C-]> g<C-]>

" for Japanese IME mode"{{{
nnoremap あ a
nnoremap い i
nnoremap う u
nnoremap え e
nnoremap お o
nnoremap っd dd
nnoremap っy yy
nnoremap し” ci"
nnoremap し’ ci'
nnoremap せ ce
nnoremap で de
inoremap <silent> っj <ESC>

nnoremap っz zz
"}}}

" quote and bracket
inoremap {} {}<Left>
inoremap [] []<Left>
inoremap () ()<Left>
inoremap "" ""<Left>
inoremap '' ''<Left>
inoremap <> <><Left>
inoremap $$ $$<Left>

" source vimrc
map <Leader>so :source ~/.vimrc<CR>

" my functions
nnoremap <Leader>h1 :call Markdown_h1()<CR>
nnoremap <Leader>h2 :call Markdown_h2()<CR>
nnoremap <Leader>h3 :call Markdown_h3()<CR>

"---------------------------------------------------------------------------}}}
